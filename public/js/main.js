/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function() {

eval("window.addEventListener(\"load\", function (x) {\r\n\r\n    let buttonStart = document.getElementById(\"button\");\r\n    let butonsGame = document.querySelector('.buttons-wrap');\r\n    let buttonRestart = document.getElementById('button-restart');\r\n    let buttonEnd = document.getElementById('button-end');\r\n\r\n    let GAME_WIDTH = 1000;\r\n    let GAME_HEIGHT = 390;\r\n\r\n    let gameLive = true;\r\n\r\n    //получить контекст\r\n    let canvas = document.getElementById(\"mycanvas\");\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.style.display = 'none';\r\n    butonsGame.style.display = 'none';\r\n    buttonStart.addEventListener('click', function () {\r\n        canvas.style.display = 'block';\r\n        butonsGame.style.display = 'block';\r\n        buttonStart.style.display = 'none';\r\n    });\r\n\r\n    //враги\r\n    let enemies = [\r\n        {\r\n            x: 100, //x координата\r\n            y: 100, //y координата\r\n            speedY: 1.5, //скорость по Y\r\n            w: 90, //ширина\r\n            h: 30 //высота\r\n        },\r\n        {\r\n            x: 340,\r\n            y: 100,\r\n            speedY: 2,\r\n            w: 90,\r\n            h: 30\r\n        },\r\n        {\r\n            x: 540,\r\n            y: 100,\r\n            speedY: 3,\r\n            w: 90,\r\n            h: 30\r\n        },\r\n        {\r\n            x: 780,\r\n            y: 100,\r\n            speedY: 1,\r\n            w: 90,\r\n            h: 30\r\n        }\r\n    ];\r\n\r\n    //игрок\r\n    let player = {\r\n        x: 10,\r\n        y: 160,\r\n        speedX: 2,\r\n        w: 65,\r\n        h: 10,\r\n        isMoving: false\r\n    };\r\n\r\n    //finish\r\n    let goal = {\r\n        x: 900,\r\n        y: 150,\r\n        w: 10,\r\n        h: 36\r\n    };\r\n\r\n    let sprites = {};\r\n\r\n    let movePlayer = function () {\r\n        player.isMoving = true;\r\n    }\r\n\r\n    let stopPlayer = function () {\r\n        player.isMoving = false;\r\n    }\r\n\r\n    //addEventListener на игрока\r\n    canvas.addEventListener('mousedown', movePlayer);\r\n    canvas.addEventListener('mouseup', stopPlayer);\r\n    canvas.addEventListener('touchstart', movePlayer);\r\n    canvas.addEventListener('touchend', stopPlayer);\r\n\r\n    //инициализация спрайта\r\n    let load = function () {\r\n        sprites.player = new Image();\r\n        sprites.player.src = '../img/fish.png';\r\n\r\n        // sprites.background = new Image();\r\n        // sprites.background.src = '../img/floor.png';\r\n\r\n        sprites.enemies = new Image();\r\n        sprites.enemies.src = '../img/shark.png';\r\n\r\n        sprites.goal = new Image();\r\n        sprites.goal.src = '../img/seaweed.png';\r\n    }\r\n\r\n    //логика обьектов\r\n    let update = function () {\r\n\r\n        //проверка на финиш\r\n        if (checkCollision(player, goal)) {\r\n            //stop game\r\n            gameLive = false;\r\n            alert(\"You are a winner!\");\r\n            // window.location = \"\"; // рестарт\r\n        }\r\n\r\n        //игрок\r\n        if (player.isMoving) {\r\n            player.x = player.x + player.speedX;\r\n        }\r\n\r\n        //враги\r\n        enemies.forEach(function (element, index) {\r\n            if (checkCollision(player, element)) {\r\n                //остановка игры\r\n                gameLive = false;\r\n                alert(\"game over\");\r\n                window.location = \"\"; // рестарт\r\n            }\r\n            element.y += element.speedY;\r\n\r\n            //границы движения обьектов\r\n            if (element.y <= 10) {\r\n                element.y = 10;\r\n                element.speedY *= -1; //изменить направление движения объекта\r\n            } else if (element.y >= GAME_HEIGHT - 50) {\r\n                element.y = GAME_HEIGHT - 50;\r\n                element.speedY *= -1;\r\n            }\r\n        });\r\n    };\r\n\r\n    //показать обьекты на экране.\r\n    let draw = function () {\r\n        //чистим холст\r\n        ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\r\n\r\n        //background\r\n        // ctx.drawImage(sprites.background, 0, 0);\r\n\r\n        //объект игрок\r\n        ctx.drawImage(sprites.player, player.x, player.y);\r\n        // ctx.fillStyle = \"#00FF00\";\r\n        // ctx.fillRect(player.x, player.y, player.w, player.h);\r\n\r\n        //объекты враги\r\n        // ctx.fillStyle = \"#3333FF\";\r\n        enemies.forEach(function (element, index) {\r\n            // ctx.translate(50, 50);\r\n            // ctx.rotate(-this.angle + Math.PI/2.0);\r\n            ctx.drawImage(sprites.enemies, element.x, element.y);\r\n            // ctx.rotate(this.angle - Math.PI/2.0);\r\n            // // ctx.fillRect(element.x, element.y, element.w, element.h);\r\n            // ctx.translate(-50, -50);\r\n        });\r\n\r\n        //финиш\r\n        ctx.drawImage(sprites.goal, goal.x, goal.y);\r\n        // ctx.fillStyle = \"rgb(128,128,0)\";\r\n        // ctx.fillRect(goal.x, goal.y, goal.w, goal.h);\r\n    };\r\n\r\n    //инициализируем несколько раз в секунду\r\n    let step = function () {\r\n\r\n        update();\r\n        draw();\r\n        if (gameLive) {\r\n            window.requestAnimationFrame(step);\r\n        }\r\n    };\r\n    let checkCollision = function (rect1, rect2) {\r\n        let closeOnWidth = Math.abs(rect1.x - rect2.x) <= Math.abs(rect1.w, rect2.w);\r\n        let closeOnHeight = Math.abs(rect1.y - rect2.y) <= Math.abs(rect1.h, rect2.h);\r\n        return closeOnHeight && closeOnWidth;\r\n    }\r\n\r\n    load();\r\n    step();\r\n\r\n    buttonRestart.addEventListener('click', function () {\r\n        window.location = \"\";\r\n        canvas.style.display = 'block';\r\n        butonsGame.style.display = 'block';\r\n        buttonStart.style.display = 'none';\r\n    });\r\n\r\n    console.log(GAME_WIDTH);\r\n    console.log(player.x);\r\n});\r\n\n\n//# sourceURL=webpack://gulp-starter/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"]();
/******/ 	
/******/ })()
;